using System.Linq;
using Content.Shared.Access.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class NewFinePopup : DefaultWindow
{
    private const int MaxNumberLength = 5;
    private const int MaxCrimeLength = 120;

    public event Action<string, uint, string>? OnFineIssued;

    public NewFinePopup()
    {
        RobustXamlLoader.Load(this);

        // margins trolling
        ContentsContainer.Margin = new Thickness(3);

        // Button handlers
        CancelButton.OnPressed += _ => Close();
        CreateButton.OnPressed += _ => IssueFine();

        // Input validation
        NameInput.OnTabComplete += _ => AmountInput.GrabKeyboardFocus();
        NameInput.OnTextEntered += _ => IssueFine();

        AmountInput.OnTabComplete += _ => CrimeInput.GrabKeyboardFocus();
        AmountInput.OnTextEntered += _ => IssueFine();

        CrimeInput.OnTabComplete += _ => NameInput.GrabKeyboardFocus();
        CrimeInput.OnTextEntered += _ => IssueFine();

        // Input validation
        NameInput.OnTextChanged += args =>
        {
            if (args.Text.Length > IdCardConsoleComponent.MaxFullNameLength)
                NameInput.Text = args.Text[..IdCardConsoleComponent.MaxFullNameLength];
            ValidateInputs();
        };

        AmountInput.OnTextChanged += args =>
        {
            if (args.Text.Length > MaxNumberLength)
                AmountInput.Text = args.Text[..MaxNumberLength];

            // Filter to digits only
            var newText = string.Concat(AmountInput.Text.Where(char.IsDigit));
            if (newText != AmountInput.Text)
                AmountInput.Text = newText;

            ValidateInputs();
        };

        CrimeInput.OnTextChanged += args =>
        {
            if (args.Text.Length > MaxCrimeLength)
                CrimeInput.Text = args.Text[..MaxCrimeLength];
            ValidateInputs();
        };
    }

    private void ValidateInputs()
    {
        var isValid = !string.IsNullOrWhiteSpace(NameInput.Text) &&
                      !string.IsNullOrWhiteSpace(AmountInput.Text) &&
                      !string.IsNullOrWhiteSpace(CrimeInput.Text) &&
                      uint.TryParse(AmountInput.Text, out _);

        CreateButton.Disabled = !isValid;
    }

    private void IssueFine()
    {
        if (CreateButton.Disabled || !uint.TryParse(AmountInput.Text, out var amount))
            return;

        var name = NameInput.Text.Trim();
        var crime = CrimeInput.Text.Trim();

        OnFineIssued?.Invoke(name, amount, crime);
        Close();
    }

    public void ClearInputs()
    {
        NameInput.Text = string.Empty;
        AmountInput.Text = string.Empty;
        CrimeInput.Text = string.Empty;
        ValidateInputs();
    }
}
